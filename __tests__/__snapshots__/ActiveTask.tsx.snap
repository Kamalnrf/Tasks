// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Active Task should trigger onEdit on tapping edit task 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#2C2D2F",
        "borderRadius": 5,
        "flexDirection": "row",
        "padding": 15,
      }
    }
  >
    <RNSVGSvgView
      accessibilityRole="progressbar"
      bbHeight={100}
      bbWidth={100}
      focusable={false}
      height={100}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Object {
            "transform": Array [
              Object {
                "rotateZ": "270deg",
              },
            ],
          },
          Object {
            "flex": 0,
            "height": 100,
            "width": 100,
          },
        ]
      }
      width={100}
    >
      <RNSVGGroup
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
      >
        <RNSVGDefs>
          <RNSVGLinearGradient
            gradient={
              Array [
                0,
                -16752474,
                1,
                -16734567,
              ]
            }
            gradientTransform={null}
            gradientUnits={0}
            name="grad1"
            x1="0%"
            x2="100%"
            y1="0%"
            y2="0%"
          />
          <RNSVGClipPath
            name="clip"
          >
            <RNSVGCircle
              cx="50%"
              cy="50%"
              r={41}
            />
          </RNSVGClipPath>
        </RNSVGDefs>
        <RNSVGCircle
          cx={50}
          cy={50}
          propList={
            Array [
              "stroke",
              "strokeWidth",
            ]
          }
          r={45}
          stroke={4288454050}
          strokeWidth="10"
        />
        <RNSVGCircle
          cx={50}
          cy={50}
          propList={
            Array [
              "stroke",
              "strokeWidth",
              "strokeDasharray",
              "strokeDashoffset",
              "strokeLinecap",
            ]
          }
          r={45}
          stroke={
            Array [
              1,
              "grad1",
            ]
          }
          strokeDasharray={
            Array [
              "282.7433388230814",
              "282.7433388230814",
            ]
          }
          strokeDashoffset={0}
          strokeLinecap={1}
          strokeWidth="10"
        />
        <RNSVGLine
          matrix={
            Array [
              1,
              0,
              -0,
              1,
              50,
              0,
            ]
          }
          propList={
            Array [
              "stroke",
              "strokeWidth",
            ]
          }
          stroke={4288454050}
          strokeWidth="7"
          x1={0}
          x2={0}
          y1={25}
          y2={75}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
    <View
      style={
        Object {
          "flex": 1,
          "marginLeft": 20,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#fff",
            "fontFamily": "Roboto_500Medium",
            "fontSize": 20,
            "lineHeight": 30,
          }
        }
      >
        New Task
      </Text>
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={true}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsHorizontalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        style={
          Object {
            "marginRight": -20,
          }
        }
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
      <View
        style={
          Object {
            "flexDirection": "row",
            "flexWrap": "wrap",
            "justifyContent": "flex-end",
          }
        }
      >
        <View
          accessibilityRole="button"
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "alignSelf": "flex-end",
                  "color": "#92A9EC",
                  "fontFamily": "Roboto_400Regular",
                  "fontSize": 15,
                  "lineHeight": 46,
                  "paddingRight": 10,
                },
                undefined,
              ]
            }
          >
            Start Task
          </Text>
        </View>
        <View
          accessibilityRole="button"
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "alignSelf": "flex-end",
                  "color": "#92A9EC",
                  "fontFamily": "Roboto_400Regular",
                  "fontSize": 15,
                  "lineHeight": 46,
                  "paddingRight": 10,
                },
                undefined,
              ]
            }
          >
            Edit Task
          </Text>
        </View>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;
